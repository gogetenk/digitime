@using Digitime.Client.Infrastructure.Abstractions;
@using Digitime.Shared.UI.ViewModels;
@using Microsoft.AspNetCore.Components.Web
@using Digitime.Shared.Contracts.Projects;
@using Microsoft.JSInterop;
@inject IJSRuntime js

<div class="block bg-gray-50 rounded-md my-2 @_visibilityClass">
    <div class="flex items-center px-4 py-4 sm:px-6">
        <div class="lg:mr-4 p-1 mr-4">
            <input type="checkbox" class="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500 sm:left-6">
        </div>
        <div class="container flex px-0 mx-0">
            <div class="flex grow flex-column">
                <div>
                    <select id="project-title" @bind="@_selectedProjectId" @onkeydown="OnTitleSubmited" class="max-w-xs mt-2 block w-full rounded-md border-0 py-1.5 pl-3 pr-10 text-gray-900 ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-indigo-600 sm:text-sm sm:leading-6">
                        @if (ProjectList != null && ProjectList.Any())
                        {
                            <option> </option>
                            @foreach (var project in ProjectList)
                            {
                                <option value="@project.Id">@project?.Title</option>
                            }
                        }
                    </select>

                </div>
                <div class="mt-2 sm:flex sm:justify-between">
                    <div class="sm:flex">
                        <button @onclick="OnSave" disabled="@_IsBusy" type="button" class="inline-flex items-center gap-x-1.5 rounded-md bg-black py-2 px-3 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                            Save
                        </button>
                    </div>
                </div>
            </div>
            <div class="flex sm:mt-2 mt-0 ml-2">
                <div>
                    <div class="relative mt-2 rounded-md">
                        <input type="number" @bind="_workedHours" name="hours" id="tb-hours" @onkeydown="OnHoursSubmited" max="24" min="0" step="1" class="font-bold block w-full rounded-md border-0 py-1.5 pl-7 pr-12 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6">
                        <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-3">
                            <span class="text-gray-300 text-sm">hours</span>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
    <div class="flex flex-wrap items-center bg-white justify-center border-gray-50 border-4 rounded-b py-2.5 px-4 text-xs text-gray-500">
        Type
        <kbd class="mx-1 flex h-5 w-10 items-center justify-center rounded border border-gray-400 bg-white font-semibold text-gray-900 sm:mx-2">Enter</kbd><span class="sm:inline">to jump next.</span>
    </div>
</div>

@code {
    [Inject] IDataStore DataStore { get; set; }

    [Parameter]
    public EventCallback<AddTimesheetEntryFormVM> OnAddedTimesheetEntry { get; set; }

    [Parameter]
    public List<ProjectDto> ProjectList { get; set; } = new();

    private bool _isFormVisible;
    [Parameter]
    public bool IsFormVisible
    {
        get => _isFormVisible;
        set
        {
            _isFormVisible = value;
            VisibilityChanged();
        }
    }

    private string _selectedProjectId;
    private int _workedHours = 8;
    private string _visibilityClass = "hidden";
    private bool _IsBusy;

    private async Task OnSave()
    {
        try
        {
            _IsBusy = true;

            if (string.IsNullOrEmpty(_selectedProjectId))
                return;

            var selectedProject = ProjectList.FirstOrDefault(x => x.Id == _selectedProjectId);
            await OnAddedTimesheetEntry.InvokeAsync(new AddTimesheetEntryFormVM(selectedProject, _workedHours));
        }
        finally
        {
            _IsBusy = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        await Focus("project-title");
    }

    // When the user presses enter on the project title, the focus goes on the time input
    public async Task OnTitleSubmited(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await Focus("tb-hours");
        }
    }

    // When the user presses enter on the hours input, the timesheet entry is saved
    public async Task OnHoursSubmited(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await OnSave();
        }
    }

    private void VisibilityChanged()
    {
        _visibilityClass = _isFormVisible ? _visibilityClass = "visible" : _visibilityClass = "hidden";
    }

    private async Task Focus(string elementId)
    {
        await js.InvokeVoidAsync("focusElement", elementId);
    }
}
